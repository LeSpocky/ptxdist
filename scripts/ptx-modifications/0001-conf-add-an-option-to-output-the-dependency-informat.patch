From: Michael Olbrich <m.olbrich@pengutronix.de>
Date: Mon, 1 Nov 2010 19:49:21 +0100
Subject: [PATCH] conf: add an option to output the dependency information

Signed-off-by: Michael Olbrich <m.olbrich@pengutronix.de>
---
 scripts/kconfig/conf.c | 60 ++++++++++++++++++++++++++++++++++++++++++
 1 file changed, 60 insertions(+)

diff --git a/scripts/kconfig/conf.c b/scripts/kconfig/conf.c
index db03e2f45de4..32b4b6b99085 100644
--- a/scripts/kconfig/conf.c
+++ b/scripts/kconfig/conf.c
@@ -35,6 +35,7 @@ enum input_mode {
 	olddefconfig,
 	yes2modconfig,
 	mod2yesconfig,
+	writedepend,
 };
 static enum input_mode input_mode = oldaskconfig;
 
@@ -454,6 +455,55 @@ static void check_conf(struct menu *menu)
 		check_conf(child);
 }
 
+static void create_dep_output()
+{
+	int i;
+	bool hit;
+	const char *filename;
+	struct symbol *sym;
+	struct property *prop;
+
+	for_all_symbols(i, sym) {
+		if ((sym_get_tristate_value(sym) == no) || !sym->name)
+			continue;
+
+		hit = 0;
+		filename = NULL;
+		for (prop = sym->prop; prop; prop = prop->next) {
+			if (prop->type == P_SELECT && expr_calc_value(prop->visible.expr))
+				hit=1;
+			if (prop->type == P_SYMBOL)
+				filename = prop->menu->file->name;
+			if (filename && hit)
+				break;
+		}
+		if (filename)
+			printf("SOURCE:%s:%s\n", sym->name, filename);
+		if (!hit)
+			continue;
+		printf("DEP:%s", sym->name);
+		for (prop = sym->prop; prop; prop = prop->next) {
+			if (prop->type == P_SELECT && expr_calc_value(prop->visible.expr)) {
+				printf(":%s", prop->expr->left.sym->name);
+			}
+		}
+		printf("\n");
+	}
+	printf("SYMBOLS:ALL");
+	for_all_symbols(i, sym) {
+		if (sym->name && (sym->type != S_UNKNOWN))
+			printf(":%s", sym->name);
+	}
+	printf("\n");
+	printf("SYMBOLS:UNKNOWN");
+	for_all_symbols(i, sym) {
+		if (sym->name && (sym->type == S_UNKNOWN) &&
+			!(sym->flags & SYMBOL_CONST))
+			printf(":%s", sym->name);
+	}
+	printf("\n");
+}
+
 static struct option long_opts[] = {
 	{"oldaskconfig",    no_argument,       NULL, oldaskconfig},
 	{"oldconfig",       no_argument,       NULL, oldconfig},
@@ -470,6 +507,7 @@ static struct option long_opts[] = {
 	{"olddefconfig",    no_argument,       NULL, olddefconfig},
 	{"yes2modconfig",   no_argument,       NULL, yes2modconfig},
 	{"mod2yesconfig",   no_argument,       NULL, mod2yesconfig},
+	{"writedepend",     no_argument,       NULL, writedepend},
 	{NULL, 0, NULL, 0}
 };
 
@@ -502,6 +540,7 @@ int main(int ac, char **av)
 	int opt;
 	const char *name, *defconfig_file = NULL /* gcc uninit */;
 	int no_conf_write = 0;
+	int dep_output = 0;
 
 	tty_stdio = isatty(0) && isatty(1);
 
@@ -510,6 +549,10 @@ int main(int ac, char **av)
 			conf_set_message_callback(NULL);
 			continue;
 		}
+		if (opt == writedepend) {
+			dep_output = 1;
+			continue;
+		}
 		input_mode = (enum input_mode)opt;
 		switch (opt) {
 		case syncconfig:
@@ -722,5 +765,9 @@ int main(int ac, char **av)
 			return 1;
 		}
 	}
+
+	if (dep_output)
+		create_dep_output();
+
 	return 0;
 }
