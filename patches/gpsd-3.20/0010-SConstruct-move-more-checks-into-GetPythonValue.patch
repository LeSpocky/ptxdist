From: "Gary E. Miller" <gem@rellim.com>
Date: Wed, 8 Jan 2020 18:04:15 -0800
Subject: [PATCH] SConstruct: move more checks into GetPythonValue()

So the target python is used, not the python used to run scons.
---
 SConstruct | 36 ++++++++++++++++--------------------
 1 file changed, 16 insertions(+), 20 deletions(-)

diff --git a/SConstruct b/SConstruct
index a5c41e8f4803..9f88fa347b9a 100644
--- a/SConstruct
+++ b/SConstruct
@@ -33,7 +33,6 @@ from __future__ import print_function
 import ast
 import functools
 import glob
-import imp         # for imp.find_module('gps'), imp deprecated in 3.4
 import operator
 import os
 import pickle
@@ -598,12 +597,14 @@ def CheckC11(context):
 
 
 def GetPythonValue(context, name, imp, expr, brief=False):
-    context.Message('Obtaining Python %s... ' % name)
+    """Get a value from the target python, not the running one."""
+    context.Message('Checking Python %s... ' % name)
 
     # what is this about?
     context.sconf.cached = 0  # Avoid bogus "(cached)"
 
     if not context.env['target_python']:
+        # FIXME: this ignores imp
         status = 0
         value = str(eval(expr))
     else:
@@ -616,10 +617,8 @@ def GetPythonValue(context, name, imp, expr, brief=False):
             value = value.strip()
         else:
             value = ''
-            announce('Python command "%s" failed - disabling Python.\n'
-                     'Python components will NOT be installed' %
-                     command[2])
-            context.env['python'] = False
+            # do not disable python because this failed
+            # maybe testing for newer python feature
     if 0 != status:
         result = 'failed'
     elif brief:
@@ -1023,7 +1022,8 @@ else:
         if config.env["magic_hat"]:
             announce("Forcing magic_hat=no since RFC2783 API is unavailable")
             config.env["magic_hat"] = False
-    tiocmiwait = config.CheckDeclaration("TIOCMIWAIT", "#include <sys/ioctl.h>")
+    tiocmiwait = config.CheckDeclaration("TIOCMIWAIT",
+                                         "#include <sys/ioctl.h>")
     if not tiocmiwait and not kpps:
         announce("Neither TIOCMIWAIT nor RFC2783 API is available)")
         if config.env["timeservice"]:
@@ -1218,28 +1218,24 @@ elif config.env['python']:
             config.env['aiogps'] = True
 
         # check for pyserial
-        try:
-            imp.find_module('serial')
-            announce("Python module serial (pyserial) found.")
-        except ImportError:
+        if not config.GetPythonValue('module serial (pyserial)',
+                                     'import serial', '"found"'):
             # no pyserial, used by ubxtool and zerk
-            announce("WARNING: Python module serial (pyserial) not found.")
+            announce("WARNING: ubxtool and zerk are missing optional "
+                     "runtime module serial")
 
         config.env['xgps_deps'] = True
+
         # check for pycairo
-        try:
-            imp.find_module('cairo')
-            announce("Python module cairo (pycairo) found.")
-        except ImportError:
+        if not config.GetPythonValue('module cairo (pycairo)',
+                                     'import cairo', '"found"'):
             # no pycairo, used by xgps, xgpsspeed
             config.env['xgps_deps'] = False
             announce("WARNING: Python module cairo (pycairo) not found.")
 
         # check for pygobject
-        try:
-            imp.find_module('gi')
-            announce("Python module gi (pygobject) found.")
-        except ImportError:
+        if not config.GetPythonValue('module gi (pygobject)',
+                                     'import gi', '"found"'):
             # no pycairo, used by xgps, xgpsspeed
             config.env['xgps_deps'] = False
             announce("WARNING: Python module gi (pygobject) not found.")
